{"version":3,"sources":["components/Header.js","components/Character.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","style","color","alert","score","highscore","styles","border","Character","alt","name","src","image","onClick","clicked","id","height","width","Wrapper","children","App","state","count","characters","map","friend","setState","shuffle","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NAkBeA,MAhBf,SAAgBC,GACd,OACE,yBAAKC,UAAU,qBACjB,0BAAMA,UAAU,2CACd,4CAEF,0BAAMA,UAAU,4CACd,wBAAIC,MAAOF,EAAMG,OAAQH,EAAMI,QAEjC,0BAAMH,UAAU,4CACd,sCAAYD,EAAMK,MAAlB,kBAAwCL,EAAMM,cCV5CC,EAAS,CACbC,OAAQ,CACNA,OAAQ,oBAgBGC,MAZf,SAAmBT,GACjB,OAGE,0BAAMC,UAAU,kBACd,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,MAAOC,QAAS,kBAAMd,EAAMe,QAAQf,EAAMgB,KAAKC,OAAQ,IAAKC,MAAO,IAAKjB,UAAU,sBAAsBC,MAAOK,EAAOC,WCP9IW,MAJf,SAAiBnB,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMoB,W,OCoF1BC,E,2MA/EbC,MAAQ,CACNC,MAAO,EACPjB,UAAW,EACXkB,aACApB,MAAO,2BACPD,MAAO,CACLA,MAAO,U,EAIXY,QAAU,SAAAC,GAGR,EAAKM,MAAME,WAAWC,KAAI,SAAAC,GACpBA,EAAOV,KAAOA,IACZU,EAAOH,MAAQ,GACjBG,EAAOH,QAEP,EAAKI,SAAS,CAAEJ,MAAO,EAAKD,MAAMC,MAAQ,IAC1C,EAAKI,SAAS,CAACvB,MAAO,mBACtB,EAAKuB,SAAS,CAACxB,MAAO,CAACA,MAAO,aAE3B,EAAKmB,MAAMC,MAAQ,EAAKD,MAAMhB,WACjC,EAAKqB,SAAS,CAAErB,UAAW,EAAKgB,MAAMC,QAEtC,EAAKI,SAAS,CAAEJ,MAAO,IACvB,EAAKI,SAAS,CAACvB,MAAO,qBACtB,EAAKuB,SAAS,CAACxB,MAAO,CAACA,MAAO,SAC9B,EAAKmB,MAAME,WAAWC,KAAI,SAAAC,GAAM,OAAIA,EAAOH,MAAM,UAIvD,EAAKK,QAAQ,EAAKN,MAAME,a,EAG1BI,QAAU,SAACJ,GAIT,IAHA,IAAsCK,EAAgBC,EAAlDC,EAAeP,EAAWQ,OAGvB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBL,EAHjBO,GAAgB,GAIhBP,EAAWO,GAAgBP,EAAWM,GACtCN,EAAWM,GAAeD,EAG5B,EAAKF,SAASH,I,wEAIN,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEnB,MAAO+B,KAAKd,MAAMC,MAClBjB,UAAW8B,KAAKd,MAAMhB,UACtBF,MAASgC,KAAKd,MAAMlB,MACpBD,MAASiC,KAAKd,MAAMnB,QAErBiC,KAAKd,MAAME,WAAWC,KAAI,SAAAY,GAAS,OAClC,kBAAC,EAAD,CACErB,GAAIqB,EAAUrB,GACdsB,IAAKD,EAAUrB,GACfL,KAAM0B,EAAU1B,KAChBE,MAAOwB,EAAUxB,MACjBU,MAAOc,EAAUd,MACjBR,QAAS,EAAKA,aAdpB,S,GA3DYwB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7022be42.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(props) {\n  return (\n    <nav className=\"navbar bg-primary\">\n  <span className=\"navbar-text float-left font-weight-bold\">\n    <h1>Clicky Game</h1>\n  </span>\n  <span className=\"navbar-text text-center font-weight-bold\">\n    <h5 style={props.color}>{props.alert}</h5>\n  </span>\n  <span className=\"navbar-text float-right font-weight-bold\">\n    <h3>Score: {props.score} | High Score: {props.highscore}</h3>\n  </span>\n</nav>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst styles = {\n  border: {\n    border: \"2px solid black\"\n  }\n};\n\nfunction Character(props) {\n  return (\n    // <div className=\"card\">\n    //   <div className=\"img-container\">\n    <span className=\"container ml-5\">\n      <img alt={props.name} src={props.image} onClick={() => props.clicked(props.id)} height={250} width={220} className=\"mr-2 ml-2 mt-3 mb-3\" style={styles.border} />\n    </span>\n    //   </div>\n    // </div>\n  );\n}\n\nexport default Character;\n","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Character from \"./components/Character\";\nimport Wrapper from \"./components/Wrapper\";\nimport characters from \"./character.json\"\n\nclass App extends Component {\n\n  state = {\n    count: 0,\n    highscore: 0,\n    characters,\n    alert: \"Click an Image to Begin!\",\n    color: {\n      color: \"black\"\n    }\n  };\n  \n  clicked = id => {\n    \n    // eslint-disable-next-line array-callback-return\n    this.state.characters.map(friend => {\n      if (friend.id === id) {\n        if (friend.count < 1) {\n          friend.count++;\n         // alert(friend.count)\n          this.setState({ count: this.state.count + 1 });\n          this.setState({alert: \"Correct Guess!\"})\n          this.setState({color: {color: \"Green\"}})\n        } else {\n          if(this.state.count > this.state.highscore){\n          this.setState({ highscore: this.state.count })\n        }\n          this.setState({ count: 0 })\n          this.setState({alert: \"Incorrect Guess!\"})\n          this.setState({color: {color: \"Red\"}})\n          this.state.characters.map(friend => friend.count=0)\n        }\n      }\n    })\n    this.shuffle(this.state.characters)\n  }\n\n  shuffle = (characters) => {\n    var currentIndex = characters.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = characters[currentIndex];\n      characters[currentIndex] = characters[randomIndex];\n      characters[randomIndex] = temporaryValue;\n    }\n  \n    this.setState(characters);\n  }\n  \n\n  render() {\n    return (\n      <Wrapper>\n        <Header\n          score={this.state.count}\n          highscore={this.state.highscore}\n          alert = {this.state.alert}\n          color = {this.state.color}\n        />\n        {this.state.characters.map(character => (\n          <Character\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            count={character.count}\n            clicked={this.clicked}\n          />\n        ))};\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}